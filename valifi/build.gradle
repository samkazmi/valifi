final VERSION_MAJOR = 1 // max two digits
final VERSION_MINOR = 4 // max two digits
final VERSION_PATCH = 2 // max two digits
final VERSION_BUILD = 0 // max three digits

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
group='com.github.samkazmi'
// whether the project is built on dev machine or CI
def isLocalBuild = project.file('../local.properties').exists()

ext {
	bintrayRepo = 'maven'
	bintrayName = 'valifi'

	publishedGroupId = 'com.samkazi'
	libraryName = 'ValiFi'
	artifact = 'valifi'

	libraryDescription = 'Android validation library for data binding'

	siteUrl = 'https://github.com/samkazmi/valifi'
	gitUrl = 'https://github.com/samkazmi/valifi.git'

	libraryVersion = "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}"

	developerId = 'samkazmi'
	developerName = 'Samkazmi'
	developerEmail = 'samkazmi50@gmail.com'

	licenseName = 'The Apache Software License, Version 2.0'
	licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
	allLicenses = ["Apache-2.0"]
}

android {
	compileSdkVersion 28

	defaultConfig {
		minSdkVersion 14
		targetSdkVersion 28
		versionCode VERSION_MAJOR * 10000000 + VERSION_MINOR * 100000 + VERSION_PATCH * 1000 + VERSION_BUILD
		versionName "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}"
	}
	buildTypes {
		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		}
	}

	dataBinding {
		enabled = true
	}

	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_7
		targetCompatibility JavaVersion.VERSION_1_7
	}

	testOptions {
		unitTests.all {
			testLogging {
				events "passed", "skipped", "failed", "standardOut", "standardError"
				outputs.upToDateWhen {false}
				showStandardStreams = true
			}
		}
	}
}

dependencies {
	implementation fileTree(include: ['*.jar'], dir: 'libs')
	implementation 'com.google.android.material:material:1.0.0'
	testImplementation 'junit:junit:4.12'
}

if(isLocalBuild) {
	afterEvaluate {
		javadoc.classpath += files(android.libraryVariants.collect {variant ->
			variant.javaCompile.classpath.files
		})
	}

	apply from: "./install.gradle"
	apply from: "./bintray.gradle"

	def version = project.android.defaultConfig.versionName
	def compilePath = project.ext.publishedGroupId + ":" + project.ext.bintrayName + ":"

	// Task for updating readme file for new version of library
	task updateReadmeFile {
		def readme = file('../README.md')

		def updatedReadmeText = readme.text.replaceFirst("implementation '" + compilePath + "[^']+'", "implementation '" + compilePath + version + "'")
		readme.write(updatedReadmeText)
	}

	// task for updating example gradle scripts so that it matches the latest version of library
	task updateExamplesLibraryVersion {
		['example-android', 'example-arch-viewmodel'].each {
			def gradleScript = file("../${it}/build.gradle")
			def updatedGradleText = gradleScript.text.replaceAll("implementation '" + compilePath + "[^']+'", "implementation '" + compilePath + version + "'")
			gradleScript.write(updatedGradleText)
		}
	}

	install.dependsOn updateReadmeFile
	install.dependsOn updateExamplesLibraryVersion
}